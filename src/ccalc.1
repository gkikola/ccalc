.\" Copyright (C) 2015-2016 Gregory Kikola.
.\"
.\" This file is part of ccalc.
.\"
.\" ccalc is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\"
.\" ccalc is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\" 
.\" You should have received a copy of the GNU General Public License
.\" along with ccalc.  If not, see <http://www.gnu.org/licenses/>.
.\" 
.\" Written by Gregory Kikola <gkikola@gmail.com>.
.TH ccalc 1 "2016 January 08" "ccalc 0.1"
.SH NAME
ccalc \- evaluate mathematical expressions
.SH SYNOPSIS
.B ccalc
.RI [ OPTION "...] [" EXPRESSION ]
.SH DESCRIPTION
.B ccalc
is a fast and lightweight command-line calculator, ideal for
performing quick calculations from the terminal. This is often faster and
easier than invoking an interactive or graphical program. The
"EXAMPLES" section can help you get started quickly.
.PP
.B ccalc
takes an arithmetic expression as an argument, it evaluates this expression,
and then it prints the result. If no expression is given,
.B ccalc
will read lines from standard input. Any program options must be specified
before the start of an expression.
.PP
The input expression is assumed to follow the syntax of the C programming
language. All C operators are supported except for those with side-effects
(namely assignment, increment, and decrement). A few mathematical constants
like
.IR PI " and " E
are defined, and most of the math
functions in the C standard library are available.
.PP
Both integer and floating-point values may be used in the input expression.
.B ccalc
will perform conversions where necessary. Integer values may also be
specified in binary, octal, or hexadecimal. Binary values should be
prefixed with '0b', octal values with '0', and hexadecimal values with '0x'.
.SH OPTIONS
Mandatory arguments to long options are also mandatory for the corresponding
short options.
.TP
.B -b, --binary
Print integer results in binary (base 2).
.TP
.B --bool
Interpret the result as a boolean value and print
.BR true " or " false.
.TP
.B -c, --caret-exp
.RB "Use caret " ^ " for exponentiation rather than for bitwise XOR."
.TP
.B -d, --degrees
Use degrees instead of radians for trigonometric functions.
.TP
.BI "-g, --grouping=" DIGITS
.RI "Group each set of " DIGITS " digits and separate each group with spaces"
.RB "(use " "-g 0" " for no grouping)."
.TP
.B -o, --octal
Print integer results in octal (base 8).
.TP
.BI "-p, --precision=" DIGITS
.RI "Print floating-point results with " DIGITS " digits after the decimal"
point (default 6).
.TP
.BI "-r, --radix=" RADIX
.RI "Print integer results in base " RADIX .
.TP
.B -s, --scientific-notation
Always print floating-point results in scientific notation: [-]d.dddeÂ±dd
.TP
.B -t, --time
Show how much time the computation took.
.TP
.B -u, --uppercase
Use uppercase letters in output instead of lowercase (e.g. for digits in bases
greater than 10).
.TP
.B -x, --hexadecimal
Print integer results in hexadecimal (base 16).
.TP
.B -?, --help
Display a help message with detailed usage information and exit.
.TP
.B --usage
Give a short usage message and exit.
.TP
.B --version
Display version information and exit.
.SH OPERATORS
The following operations are supported, in order of decreasing precedence:
.IP
.RB "grouping " () ","
.IP
.RB "exponentiation " ** ","
.IP
.RB "logical negation " ! ", bitwise negation " ~ ", unary " + " and " - ","
.IP
.RB "multiplication " * ", division " / ", integer division " // ,
.RB "modulo " % ","
.IP
.RB "addition " + ", subtraction " - ","
.IP
.RB "bit shifts " << " and " >> ","
.IP
.RB "relational comparison " < ", " <= ", " > ", and " >= ","
.IP
.RB "equality comparison " == " and " != ","
.IP
.RB "bitwise AND " & ","
.IP
.RB "bitwise XOR " ^ ","
.IP
.RB "bitwise OR " | ","
.IP
.RB "logical AND " && ","
.IP
.RB "logical OR " || ","
.IP
.RB "ternary conditional expression " ?: ","
.IP
.RB "comma " , "."
.PP
All operators have left-to-right associativity except for the unary operators, 
the exponentiation operator, and the conditional expression.
.PP
.RB "The integer division operator " // ", the modulus"
.RB "operator " % ", and the bitwise operators " & ", " | ", " ^ ","
.BR << ", " >> ", and " ~ " only work with integer values."
Unlike in C, the standard division operator
.B /
may yield a floating-point result even if both arguments are integers; if
this is not wanted, the
.B //
operator may be used to perform integer division.
.PP
By default, the caret
.B ^
indicates bitwise XOR and not exponentiation, like in C. This behavior can be
changed with the
.B -c
option. Exponentiation can also be performed by using the
.B pow
function or, unlike in C, by using the
.B **
operator.
.PP
The assignment operators and the unary increment and decrement operators
from C are not supported.
.PP
.SH FUNCTIONS
.B ccalc
has many built-in functions, listed below. Most math functions from the C
standard library are supported. For detailed usage information, please
consult your C standard library documentation.
.TP
Basic mathematical functions
.B abs, cbrt, ceil, floor, hypot, max, min, pow, round, sqrt
.TP
Exponential and logarithmic functions
.B exp, exp2, expm1, log, log10, log1p, log2
.TP
Trigonometric and inverse trigonometric functions
.B acos, asin, atan, atan2, cos, sin, tan
.TP
Hyperbolic and inverse hyperbolic functions
.B acosh, asinh, atanh, cosh, sinh, tanh
.TP
Functions for dealing with floating-point numbers
.B fmod, nextafter, remainder, trunc
.TP
Other functions
.B erf, erfc, lgamma, rand, tgamma
.PP
Most functions take a single argument.
.B atan2, fmod, hypot, nextafter,
and
.B remainder
take two arguments.
.SH CONSTANTS
The following mathematical constants are defined:
.IR E ", the base of the natural logarithm; " PHI ", the golden ratio; and"
.IR PI ", the ratio of the circumference of a circle to its diameter."
.PP
Some machine-dependent limit values from the C standard library are also provided. Consult the C library documentation for details:
.IR CHAR_MAX ", " CHAR_MIN ", " DBL_DIG ", " DBL_EPSILON ", "
.IR DBL_MANT_DIG ", " DBL_MAX ", " DBL_MAX_EXP ", " DBL_MIN ", "
.IR DBL_MIN_EXP ", " FLT_DIG ", " FLT_EPSILON ", " FLT_MANT_DIG ", "
.IR FLT_MAX ", " FLT_MAX_EXP ", " FLT_MIN ", " FLT_MIN_EXP ", "
.IR FLT_RADIX ", " INT_MAX ", " INT_MIN ", " LONG_MAX ", " LONG_MIN ", "
.IR RAND_MAX ", " SCHAR_MAX ", " SCHAR_MIN ", " SHRT_MAX ", " SHRT_MIN ", "
.IR UCHAR_MAX ", and " USHRT_MAX "."
.SH "EXIT STATUS"
.TP
.B 0
The calculation was completed successfully.
.TP
.B 1
An invalid expression was given.
.TP
.B 2
A system error occurred.
.SH EXAMPLES
Basic operations:
.IP
$ ccalc "2 + 2"
.br
4
.IP
$ ccalc "21 - 3 * 5"
.br
6
.IP
$ ccalc "8146 % 7"
.br
5
.PP
Built-in functions and constants:
.IP
$ ccalc "1.4 * E"
.br
3.805595
.IP
$ ccalc "max(12, 15)"
.br
15
.IP
$ ccalc "sin(PI / 3)"
.br
0.866025
.IP
$ ccalc "exp(3.2)"
.br
24.532530
.PP
Base conversion:
.IP
$ ccalc --radix=13 "54"
.br
42
.IP
$ ccalc --binary "0x4a"
.br
1001010
.IP
$ ccalc --radix=60 "82709"
.br
22:58:29
.PP
Boolean tests:
.IP
$ ccalc --bool "10 > 5"
.br
true
.IP
$ ccalc --bool "PI == 3"
.br
false
.SH AUTHOR
Gregory Kikola <gkikola@gmail.com>
.SH COPYRIGHT
Copyright (C) 2015-2016 Gregory Kikola. License GPLv3+: GNU GPL version 3 or
later <http://www.gnu.org/licenses/gpl.html>.
.br
This is free software: you are free to change and redistribute it. There is NO
WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
.BR abs (3),
.BR acos (3),
.BR acosh (3),
.BR asin (3),
.BR asinh (3),
.BR atan (3),
.BR atan2 (3),
.BR atanh (3),
.BR cbrt (3),
.BR ceil (3),
.BR cos (3),
.BR cosh (3),
.BR erf (3),
.BR erfc (3),
.BR exp (3),
.BR exp2 (3),
.BR expm1 (3),
.BR floor (3),
.BR fmod (3),
.BR hypot (3),
.BR lgamma (3),
.BR log (3),
.BR log10 (3),
.BR log1p (3),
.BR log2 (3),
.BR nextafter (3),
.BR pow (3),
.BR rand (3),
.BR remainder (3),
.BR round (3),
.BR sin (3),
.BR sinh (3),
.BR sqrt (3),
.BR tan (3),
.BR tanh (3),
.BR tgamma (3),
.BR trunc (3)
