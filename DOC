Usage: ccalc [OPTION...] EXPRESSION
Evaluate the C-style EXPRESSION and display the result. If no expression is
given, read from standard input.

  -b, --binary               Print integer results in binary (base 2)
      --bool                 Interpret the result as a boolean value and print
                             true or false
  -d, --degrees              Use degrees instead of radians for trigonometric
                             functions
  -e                         Use caret ^ for exponentiation rather than for
                             bitwise XOR
  -o, --octal                Print integer results in octal (base 8)
  -p, --precision=DIGITS     Print floating-point results with DIGITS digits
                             after the decimal point (default 6)
  -r, --radix=RADIX          Print integer results in base RADIX
  -t, --time                 Show how much time the computation took
  -u, --uppercase            Use uppercase rather than lowercase letters for
                             digits in bases greater than 10
  -x, --hexadecimal          Print integer results in hexadecimal (base 16)
  -?, --help                 Give this help list
      --usage                Give a short usage message
      --version              Display version information and exit

Mandatory or optional arguments to long options are also mandatory or optional
for any corresponding short options.

The EXPRESSION is interpreted as a C expression and evaluated. Integer
operations are used when possible. If a floating-point value is given
explicitly, or if an operation results in a non-integer value, then
floating-point arithmetic is used for the remainder of the calculation.

WARNING: The caret ^ indicates bitwise XOR, like in C, and not exponentiation.
This behavior can be changed with the '-e' option. Exponentiation can also be
performed using the pow function or (unlike in C) the ** operator.

Many mathematical functions from the C standard library are available. Common
mathematical constants like PI and E are also defined. See below for a complete
list.


OPERATORS

The following operations are supported, in order of decreasing precedence:
  grouping (),
  logical negation !, bitwise negation ~, unary + and -,
  exponentiation **,
  multiplication *, division /, modulo %,
  addition +, subtraction -,
  bit shifts << and >>,
  relational comparison <, <=, >, and >=,
  equality comparison == and !=,
  bitwise AND &,
  bitwise XOR ^,
  bitwise OR |,
  logical AND &&,
  logical OR ||,
  ternary conditional expression ?:,
  comma ,.
All operators have left-to-right associativity except for the unary operators
and the conditional expression. The modulus operator % and the bitwise
operators &, |, ^, <<, >>, and ~ only work with integer values. The assignment
operators and the increment and decrement operators from C are not supported.


FUNCTIONS

The following mathematical functions are supported:
  abs(x)           absolute value of x
  acos(x)          arccosine of x in range [0, PI]
  acosh(x)         inverse hyperbolic cosine of x
  asin(x)          arcsine of x in range [-PI/2, PI/2]
  asinh(x)         inverse hyperbolic sine of x
  atan(x)          arctangent of x in range [-PI/2, PI/2]
  atan2(y, x)      arctangent of y/x in range [-PI, PI]
  atanh(x)         inverse hyperbolic tangent of x
  cbrt(x)          cube root of x
  ceil(x)          smallest integer greater than or equal to x
  cos(x)           cosine of x
  cosh(x)          hyperbolic cosine of x
  erf(x)           error function of x
  erfc(x)          complementary error function of x: 1 - erf(x)
  exp(x)           exponential function E^x
  exp2(x)          2 to the power of x
  expm1(x)         computes exp(x) - 1
  floor(x)         largest integer less than or equal to x
  fmod(x, y)       floating-point remainder of x/y, with same sign as x
  hypot(x, y)      square root of the sum of the squares of x and y
  lgamma(x)        natural logarithm of the absolute value of gamma of x
  log(x)           natural logarithm of x
  log10(x)         base-10 logarithm of x
  log1p(x)         computes log(x + 1)
  log2(x)          base-2 logarithm of x
  max(x, y)        maximum value of x and y
  min(x, y)        minimum value of x and y
  nextafter(x, y)  returns the next value, in the direction of y, after x that
                     can be represented on the current machine in a double-
                     precision floating point value
  pow(x)           x to the power of y
  rand()           pseudo-random integer between 0 and RAND_MAX
  remainder(x, y)  remainder of x/y, with quotient rounded toward the
                     nearest integral value
  round(x)         x rounded to nearest integer
  sin(x)           sine of x
  sinh(x)          hyperbolic sine of x
  sqrt(x)          square root of x
  tan(x)           tangent of x
  tanh(x)          hyperbolic tangent of x
  tgamma(x)        gamma function of x
  trunc(x)         truncated integer value of x


CONSTANTS

A few mathematical constants are defined:
  E    the base of the natural logarithm
  PHI  the golden ratio, (1 + sqrt(5))/2
  PI   the ratio of the circumference of a circle to its diameter

The following machine-dependent limit values are also defined:
  CHAR_MAX      the maximum value that can be represented by the 'char' data
                  type
  CHAR_MIN      the minimum value that can be represented by the 'char' data
                  type
  DBL_DIG       the number of decimal digits of precision for the 'double' data
                  type
  DBL_EPSILON   the difference between 1 and the smallest floating point number
                  greater than 1 that can be represented by the 'double' data
		  type
  DBL_MANT_DIG  the number of base-FLT_RADIX digits in the floating point
                  mantissa for the 'double' data type
  DBL_MAX       the maximum value that can be represented by the 'double' data
                  type
  DBL_MAX_EXP   the largest possible exponent value for the 'double' data type
  DBL_MIN       the minimum normalized positive floating point number that can
                  be represented by the 'double' data type
  DBL_MIN_EXP   the smallest possible exponent value for the 'double' data type
  FLT_DIG       the number of decimal digits of precision for the 'float' data
                  type
  FLT_EPSILON   the difference between 1 and the smallest floating point number
                  greater than 1 that can be represented by the 'float' data
		  type
  FLT_MANT_DIG  the number of base-FLT_RADIX digits in the floating point
                  mantissa for the 'float' data type
  FLT_MAX       the maximum value that can be represented by the 'float' data
                  type
  FLT_MAX_EXP   the largest possible exponent value for the 'float' data type
  FLT_MIN       the minimum normalized positive floating point number that can
                  be represented by the 'float' data type
  FLT_MIN_EXP   the smallest possible exponent value for the 'float' data type
  FLT_RADIX     the base of the floating point exponent representation on the
                  current system (usually 2)
  INT_MAX       the maximum value that can be represented by the signed 'int'
                  data type
  INT_MIN       the minimum value that can be represented by the signed 'int'
                  data type
  LONG_MAX      the maximum value that can be represented by the signed 'long
                  int' data type
  LONG_MIN      the minimum value that can be represented by the signed 'long
                  int' data type
  RAND_MAX      the maximum value returned by the rand function
  SCHAR_MAX     the maximum value that can be represented by the 'signed char'
                  data type
  SCHAR_MIN     the minimum value that can be represented by the 'signed char'
                  data type
  SHRT_MAX      the maximum value that can be represented by the signed 'short
                  int' data type
  SHRT_MIN      the minimum value that can be represented by the signed 'short
                  int' data type
  UCHAR_MAX     the maximum value that can be represented by the 'unsigned char'
                  data type
  USHRT_MAX     the maximum value that can be represented by the 'unsigned short
                  int' data type


EXIT STATUS

Exit status:
0  if the calculation completed successfully,
1  if an invalid expression was given,
2  if a system error occurred.

